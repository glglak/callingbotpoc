/**
 * @module botframework-connector
 */
import { ConfidentialClientApplication } from '@azure/msal-node';
import { AppCredentials } from './appCredentials';
import { AuthenticatorResult } from './authenticatorResult';
export interface Certificate {
    thumbprint: string;
    privateKey: string;
}
/**
 * An implementation of AppCredentials that uses @azure/msal-node to fetch tokens.
 */
export declare class MsalAppCredentials extends AppCredentials {
    /**
     * A reference used for Empty auth scenarios
     */
    static Empty: MsalAppCredentials;
    /**
     * Create an MsalAppCredentials instance using a confidential client application.
     *
     * @param clientApplication An @azure/msal-node ConfidentialClientApplication instance.
     * @param appId The application ID.
     * @param authority The authority to use for fetching tokens
     * @param scope The oauth scope to use when fetching tokens.
     */
    constructor(clientApplication: ConfidentialClientApplication, appId: string, authority: string, scope: string);
    /**
     * Create an MsalAppCredentials instance using a confidential client application.
     *
     * @param appId The application ID.
     * @param appPassword The application password.
     * @param authority The authority to use for fetching tokens
     * @param scope The oauth scope to use when fetching tokens.
     */
    constructor(appId: string, appPassword: string, authority: string, scope: string);
    /**
     * Create an MsalAppCredentials instance using a confidential client application.
     *
     * @param appId The application ID.
     * @param certificate The client certificate details.
     * @param authority The authority to use for fetching tokens
     * @param scope The oauth scope to use when fetching tokens.
     */
    constructor(appId: string, certificate: Certificate, authority: string, scope: string);
    /**
     * @internal
     */
    constructor();
    /**
     * @inheritdoc
     */
    protected refreshToken(): Promise<AuthenticatorResult>;
}
//# sourceMappingURL=msalAppCredentials.d.ts.map
